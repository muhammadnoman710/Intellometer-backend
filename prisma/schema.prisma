// ----------------------------
// Prisma Schema (final - zone based)
// ----------------------------

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ----------------------------
// Enums
// ----------------------------

enum AuthProvider {
  EMAIL
  GOOGLE
}

// ----------------------------
// Models
// ----------------------------

model User {
  id         Int          @id @default(autoincrement())
  email      String       @unique
  password   String? // nullable for Google users
  provider   AuthProvider @default(EMAIL)
  isVerified Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  refreshTokens RefreshToken[]
  zones         Zone[] // ✅ each user can have multiple zones
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
  revoked   Boolean  @default(false)
}

// ----------------------------
// Zone + Diffuser Hierarchy
// ----------------------------

model Zone {
  id        String   @id @default(uuid())
  name      String // e.g. "Robt", "Kitchen", "TRO"
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  diffusers Diffuser[]
}

model Diffuser {
  id        String   @id @default(uuid())
  name      String // Auto: "Diffuser 1–15"
  label     String? // Optional custom label (e.g. "Room A", "AHU-01")
  zoneId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  zone     Zone      @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  readings Reading[] // Will hold CFM / balancing data later
}

// ----------------------------
// Reading Model (for future reports)
// ----------------------------

model Reading {
  id           String   @id @default(uuid())
  diffuserId   String
  designCFM    Float?
  actualCFM    Float?
  terminalType String?
  terminalSize String?
  createdAt    DateTime @default(now())

  diffuser Diffuser @relation(fields: [diffuserId], references: [id], onDelete: Cascade)
}
