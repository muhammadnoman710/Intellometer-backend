datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum AuthProvider {
  EMAIL
  GOOGLE
}

model User {
  id         Int          @id @default(autoincrement())
  email      String       @unique
  password   String?
  provider   AuthProvider @default(EMAIL)
  isVerified Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  refreshTokens RefreshToken[]
  projects      Project[]
  Session       Session[]
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
  revoked   Boolean  @default(false)
}

model Project {
  id        String   @id @default(uuid())
  userId    Int
  name      String
  ahuInfo   Json? // store AHU fields: model, sheetNo, location, testDate, etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  zones    Zone[]
  sessions Session[] // convenience for queries (session may also be linked to zone)
}

model Zone {
  id        String   @id @default(uuid())
  projectId String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  diffusers Diffuser[]
  sessions  Session[]
}

model Diffuser {
  id               String   @id @default(uuid())
  zoneId           String
  systemName       String // "Diffuser 1", "Diffuser 2" â€” assigned automatically
  label            String?
  sizeFeet         Float? // normalized
  size_input       String?
  size_unit        String?
  deviceIdentifier String?  @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  zone     Zone           @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  readings Reading[]
  moves    DiffuserMove[]
}

model Session {
  id                String    @id @default(uuid())
  projectId         String
  zoneId            String
  userId            Int
  sessionName       String?
  startedAt         DateTime  @default(now())
  finishedAt        DateTime?
  AHUInfo           Json? // snapshot of AHU for this session
  motorDirectionDeg Float?
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  project  Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  zone     Zone      @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id])
  readings Reading[]
}

model Reading {
  id          String  @id @default(uuid())
  sessionId   String
  diffuserId  String
  projectName String?
  areaName    String?

  // raw + canonical numeric fields
  requiredCFM_raw  String?
  requiredCFM      Float?
  requiredCFM_unit String?

  actualCFM_raw  String?
  actualCFM      Float?
  actualCFM_unit String?

  requiredTemp_raw  String?
  requiredTemp      Float?
  requiredTemp_unit String?

  actualTemp_raw  String?
  actualTemp      Float?
  actualTemp_unit String?

  grillTemp_raw  String?
  grillTemp      Float?
  grillTemp_unit String?

  voltage   Float?
  amperes   Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  session  Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  diffuser Diffuser @relation(fields: [diffuserId], references: [id], onDelete: Cascade)
}

model DiffuserMove {
  id         String   @id @default(uuid())
  diffuserId String
  fromZoneId String?
  toZoneId   String
  movedBy    Int
  movedAt    DateTime @default(now())
  note       String?
  Diffuser   Diffuser @relation(fields: [diffuserId], references: [id])
}
